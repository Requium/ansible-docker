#!/usr/local/bin/ansible-playbook
---
- name: Get Neighbors
  connection: network_cli
  gather_facts: false
  hosts: intercom
  tasks:
    - name: host
      set_fact: 
        licenses: "{{licenses|default([])}} + {{[hostvars[item].softwarekey]}}"
      with_items:
        - "{{ groups['intercom'] }}"
      # when: inventory_hostname in groups['check']
    
    # - name: print licenses
    #   debug:
    #     msg: "{{licenses}}"
    #   # when: inventory_hostname in groups['check']
      
    - name: Collect interface facts
      community.routeros.facts:
        gather_subset: "interfaces"
      when: inventory_hostname in groups['intercom']

    - name: Get Neigbors
      set_fact:
        neighbor: "{{ ansible_facts.net_neighbors }} "
      when: inventory_hostname in groups['intercom']
  
    - name: Get Routers Neighbors without Duplicated Licenses
      with_items: " {{ neighbor }} "
      set_fact:
        master_neighbors: "{{master_neighbors|default([])}} + {{[new_dict]}}"
      vars:
        new_dict:
          inventory_hostname: "{{item.identity}}"
          ansible_ssh_host: "{{item.address}}"  
          softwarekey: "{{item['software-id']}}"
          board: "{{item.board}}"
      loop_control:
        index_var: my_idx
      register: unique_neighbors
      when: "item['software-id'] is defined and item['software-id'] not in licenses and item.address is defined and item.platform is defined and item.board is defined and inventory_hostname in groups['intercom'] and ( 'CCR'  in item.board or 'RB7' in item.board or 'RB96' in item.board or 'RB45' in item.board or 'RB40' in item.board or 'RB2' in item.board or 'RB3' in item.board or 'RB5' in item.board or'CRS' in item.board) and ( my_idx == 0  or (my_idx > 1 and (master_neighbors|default([]) | selectattr('softwarekey','equalto',item['software-id']) | list | count) == 0))"
    
    - name: Print Neigbours
      debug:
        var: " {{(master_neighbors)}} "
      when: inventory_hostname in groups['intercom'] and master_neighbors is defined

    - name: Assertion of Duplicates
      assert: 
        that: >
              master_neighbors  | map(attribute='softwarekey') | list | count
              ==
              master_neighbors  | map(attribute='softwarekey') | list | unique | count
      when: master_neighbors is defined

    - name: line insert
      with_items: "{{master_neighbors}}"
      lineinfile:
        path: ./inventory
        line: "{{ item.keys()|
                  zip(item.values())|
                  map('join', '=')|
                  join(' ') }}"
        insertbefore: '\[check\]'
      when: master_neighbors is defined



